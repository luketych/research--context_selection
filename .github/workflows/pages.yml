name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Create site structure
        run: |
          # Create a simple directory structure for the site
          mkdir -p _site
          
          # Read visibility configuration and copy only visible files
          python3 << 'PYTHON'
          import json
          import os
          from pathlib import Path
          import shutil
          
          # Load visibility config from all branch
          try:
              # Fetch the visibility config from the all branch
              import subprocess
              result = subprocess.run(['git', 'show', 'all:.github-pages-visibility.json'], 
                                    capture_output=True, text=True)
              if result.returncode == 0:
                  config = json.loads(result.stdout)
              else:
                  config = {'visibility': {}}
          except:
              config = {'visibility': {}}
          
          # Copy only visible files
          visible_files = []
          for file_path, is_visible in config.get('visibility', {}).items():
              if is_visible and os.path.exists(file_path):
                  # Create directory structure
                  dest_path = Path('_site') / file_path
                  dest_path.parent.mkdir(parents=True, exist_ok=True)
                  
                  # Copy file
                  shutil.copy2(file_path, dest_path)
                  visible_files.append(file_path)
          
          # Always copy main project files
          project_files = ['CLAUDE.md']
          for pf in project_files:
              if os.path.exists(pf):
                  shutil.copy2(pf, f'_site/{pf}')
                  visible_files.append(pf)
          
          # Create navigation HTML
          nav_html = """<!DOCTYPE html>
          <html>
          <head>
              <title>Context Selection Documentation</title>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <style>
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; 
                      margin: 40px auto; 
                      max-width: 800px;
                      line-height: 1.6;
                      color: #24292f;
                  }
                  .header { border-bottom: 1px solid #d0d7de; padding-bottom: 20px; margin-bottom: 30px; }
                  .file-list { list-style: none; padding: 0; }
                  .file-list li { margin: 12px 0; padding: 8px 12px; border-radius: 6px; background: #f6f8fa; }
                  .file-list a { color: #0969da; text-decoration: none; font-weight: 500; }
                  .file-list a:hover { text-decoration: underline; }
                  .section { margin: 30px 0; }
                  .section h3 { color: #656d76; font-size: 16px; margin-bottom: 15px; }
                  .status { color: #1a7f37; font-size: 14px; }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>Context Selection Documentation</h1>
                  <p class="status">âœ… This site shows only files marked as visible in the MCP visibility configuration</p>
              </div>
              
              <div class="section">
                  <h3>ðŸ“‹ Project Files</h3>
                  <ul class="file-list">
          """
          
          # Group files by category
          project_files_list = [f for f in visible_files if not f.startswith('descriptions/')]
          desc_files_list = [f for f in visible_files if f.startswith('descriptions/')]
          
          # Add project files
          for file_path in project_files_list:
              name = os.path.basename(file_path)
              nav_html += f'                      <li><a href="{file_path}">{name}</a></li>\n'
          
          nav_html += """                  </ul>
              </div>
              
              <div class="section">
                  <h3>ðŸ“– Documentation Files</h3>
                  <ul class="file-list">
          """
          
          # Add description files
          for file_path in desc_files_list:
              name = os.path.basename(file_path).replace('.md', '').replace('-', ' ').title()
              nav_html += f'                      <li><a href="{file_path}">{name}</a></li>\n'
          
          nav_html += """                  </ul>
              </div>
              
              <div class="section">
                  <p><strong>About:</strong> This documentation site is automatically generated based on your MCP visibility settings. Only files marked as visible are included here.</p>
              </div>
          </body>
          </html>"""
          
          # Write index.html
          with open('_site/index.html', 'w') as f:
              f.write(nav_html)
          
          print("Files being deployed to GitHub Pages:")
          for f in sorted(visible_files):
              print(f"  âœ… {f}")
          PYTHON
          
          # List what we're deploying
          echo "Files being deployed to GitHub Pages:"
          find _site -type f | sort
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4